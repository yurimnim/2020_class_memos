- 오류의 종류
- 주석문
- 기본자료형
- 수식과 연산자
====================================================
<<오류의 종류>>
1. 문법 오류
	==> 자바의 문법에 어긋나는 오류
	==> 컴파일 자체가 되지 않음 
	ex) SyntaxErrorTest.java:7: error: cannot find symbol (오타)
	      java:8: error: variable year might not have been initialized (변수 선언 안해줬을 때)
	==> 컴파일이 되지 않으면 실행도 못함 
	==> 오류메세지 파악, 오류 제거, 컴파일 성공 후에 실행 해야함 
            
2. 논리오류

	==> 컴파일 되고 실행 잘 됨
	       but 기대하는데로 동작하지 않음
	==> "버그"
	==> 버그 잡아가는 과정: 디버깅 

3. 실행오류
	==> 컴파일이 되고 잘 실행 되지만 
	       사용자의 부주의 등으로 발생하는 오류 

<<자료형>>
 프로그램 실행 중에 발생하는 데이터를 저장하기 위해서는 이것을 저장하기 위한 기억공간을 확보해야 되는데 
 이것을 ==>"변수를 선언한다" 라고 합니다. 
 ==> 변수를 선언할 때는 그 변수에 어떤 성격의 데이터를 저장할 것인지 데이터의 종류를 정해줘야 합니다. (문자인지, 정수인지, 실수인지..)

 ==> 자바는 이러한 다양한 종류의 데이터 처리를 위하여 자료형을 제공합니다. 

 DATATYPE

 자바의 데이터 타입은 크게 두가지 종류가 있음 
 1. 기본자료형 : 변수자신은 값(value) 를 가지고 있음. 
 2. 참조자료형 : 변수자신이 값을 갖고 있는 것이 아니고 값(value) 이 있는 메모리를 참조하는 변수를 말한다. (객체, 배열) 

 << 기본자료형 >>
1. char : 하나의 문자를 표현 
2. boolean : 참(true) 거짓(false) 
3. byte : 정수를 위한 자료형(1 byte) -2의 7승 ~ 2의 7승 -1
4. short : 정수 (2byte) - 2의 15승 ~ 2의 15승 -1
5. int : 정수 (4byte)
6. long: 정수(8byte)
7. float: 실수(소수점 6자리)
8. double: 실수(소수점 16자리)

**java 에서는 정수값이 오면 기본적으로 int 로 취급
** java  에서는 실수값이 오면 기본적으로 double 로 취급 


<< 연산자 >>

- 산술연산자 (+ - * /)
% (나누기한 나머지)

<<증감연산자>>
++ 변수 자신의 +1 증가 연산자
-- 변수 자신의 -1 감소 연산자 

이 증감연산자가 변수명 앞에 올 수도있고 변수명 뒤에 올 수도 있음. 

증감연산자 단독으로 사용될때는 앞에오거나 뒤에오거나 결과 동일
그러나 다른 연산자와 같이 사용 될 때는 의미가 다름

++/--a  (먼저 증감연산을 수행하고 나머지 연산 실행)
a++/--  (다른 연산을 먼저 수행하고 나중에 증감연산 실행)

<<비교연산자>>
두개의 값을 서로 비교하는 연산자들 

<  >  <=  >=  ==  !=
이러한 비교연산자들의 결과는 boolean 입니다
이 연산자들은 일반적으로 if의 조건식이나 반복문의 조건식에서 주로 사용됨 

<<논리연산자>>
조건식에서 물어보고 싶은 것이 한가지가 아니라 두개 이상을 물어보고 싶을 때 사용

두가지 조건식을 모두 만족해야 함: && (And)논리곱
두가지 중에 하나만 만족해도 됨: || (Or)논리합

int a = 5;
int b = 4;

ex) a, b 모두 양수인지 판별 
if (a > 0 && b > 0)




<< 숙제 >>
1. "pdf 변수 수식과 연산자"의 Programming 3번, 4번, 5번, 9번, 11번
2. "pdf 변수 수식과 연산자"의 Lab1번

- 주민번호 받아서 암검진 대상자인지 판별
- 비트연산자(or and??), 삼항연산자(switch, case), 복합치환연산자 
- 반복문(for, while, do while)
- 제어문 (continue, break)
 

